// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"
	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
	"io"
	"net/http"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathDemoPing = "/demo.service.v1.Demo/Ping"
var PathDemoGetAudioList = "/v1/audio"
var PathDemoGetAudioInfo = "/v1/audio_info"

// DemoBMServer is the server API for Demo service.
type DemoBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	GetAudioList(ctx context.Context, req *google_protobuf1.Empty) (resp *GetAudioListRes, err error)

	GetAudioInfo(ctx context.Context, req *GetAudioInfoReq) (resp *GetAudioInfoRes, err error)
}

var DemoSvc DemoBMServer

func demoPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.Ping(c, p)
	c.JSON(resp, err)
}

func demoGetAudioList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.GetAudioList(c, p)
	c.JSON(resp, err)
}

func demoGetAudioInfo(c *bm.Context) {
	p := new(GetAudioInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.GetAudioInfo(c, p)
	c.JSON(resp, err)
}

// RegisterDemoBMServer Register the blademaster route
func RegisterDemoBMServer(e *bm.Engine, server DemoBMServer) {
	DemoSvc = server
	e.GET("/demo.service.v1.Demo/Ping", demoPing)
	e.GET("/v1/audio", demoGetAudioList)
	e.POST("/v1/audio_info", demoGetAudioInfo)
	e.GET("/v1/audio_info", demoFetchAudioInfo)
}



func demoFetchAudioInfo(c *bm.Context) {
	p := new(GetAudioInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp1, err := DemoSvc.GetAudioInfo(c, p)
	if err != nil {
		return
	}
	nrequest , err := http.NewRequest("GET", resp1.VideoUrl, nil)
	if err != nil {
		return
	}
	nrequest.Header.Add("User-Agent", c.Request.Header.Get("User-Agent"))
	resp, err := http.DefaultClient.Do(nrequest)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	for k, v := range resp.Header {
		c.Writer.Header().Set(k,v[0])
	}
	c.Writer.WriteHeader(resp.StatusCode)
	io.Copy(c.Writer, resp.Body)
}

